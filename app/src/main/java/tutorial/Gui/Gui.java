/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tutorial.Gui;
import tutorial.Gui.ImageLabel;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class Gui extends JFrame implements MouseWheelListener, MouseListener, MouseMotionListener{
    double zoomFactor = 1;
    double prevZoomFactor = 1;
    boolean zoomer;
    boolean dragger;
    boolean released;
    double xOffset = 0;
    double yOffset = 0;
    int xDiff;
    int yDiff;
    Point startPoint;
    JFrame frame;
    String imagePath = getFilePath();
    ImageIcon imageIcon = new ImageIcon(imagePath);
    JLabel originalLabel = new JLabel(imageIcon);

    private String getFilePath(){
        String tempPath = null;
        try {
            tempPath = new File("src/main/java/tutorial/resources/test_image.png").getCanonicalPath();
        } catch (IOException e) {
            System.out.print("The file 'resources/test_image.png' is not found, quiting now");
        }
        return tempPath;
    }
    public Gui() {
        this.frame = new JFrame("CSU Stanislaus Map");
        this.frame.setLayout(null);
        this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.frame.setBounds(100,200,1300,1000);
        frame.addMouseListener(this);
        frame.addMouseWheelListener(this);
        frame.addMouseMotionListener(this);
        initComponent();
        Dimension size = originalLabel.getPreferredSize();
        originalLabel.setBounds(50,30, size.width, size.height);
        this.frame.add(originalLabel);
        this.frame.setVisible(true);
    }

    private void initComponent() {
        addMouseWheelListener(this);
        System.out.println("added 1!");
        addMouseMotionListener(this);
        System.out.println("added 2!");
        addMouseListener(this);
        System.out.println("added 3!");
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        zoomer = true;

        //Zoom in
        if (e.getWheelRotation() < 0) {
            System.out.println("Scrolled up!");
            this.zoomFactor *= 1.1;
            int newHeight = (int)(imageIcon.getIconHeight() * zoomFactor);
            int newWidth = (int)(imageIcon.getIconWidth() * zoomFactor);
            ImageIcon rescaledImage = new ImageIcon(getScaledImage(imageIcon.getImage(), newWidth, newHeight));
        }
        //Zoom out
        if (e.getWheelRotation() > 0) {
            System.out.println("Scrolled down!");
            this.zoomFactor /= 1.1;
            int newHeight = (int)(imageIcon.getIconHeight() * zoomFactor);
            int newWidth = (int)(imageIcon.getIconWidth() * zoomFactor);
            getScaledImage(imageIcon.getImage(), newWidth, newHeight);
        }
    }
    @Override
    public void mouseMoved(MouseEvent e) {
        System.out.println("Mouse Moved!");
    }
    @Override
    public void mouseClicked(MouseEvent e) {
        System.out.println("Mouse clicked!");
    }
    @Override
    public void mousePressed(MouseEvent e) {
        released = false;
        this.startPoint = MouseInfo.getPointerInfo().getLocation();
    }
    @Override
    public void mouseReleased(MouseEvent e) {
        released = true;
    }
    @Override
    public void mouseEntered(MouseEvent e) {
        System.out.println("Mouse Entered Space!");
    }
    @Override
    public void mouseExited(MouseEvent e) {
        System.out.println("Mouse Exited Space!");
    }
    @Override
    public void mouseDragged(MouseEvent e) {
        Point curPoint = e.getLocationOnScreen();
        xDiff = curPoint.x - startPoint.x;
        yDiff = curPoint.y - startPoint.y;

        dragger = true;

    }

    private Image getScaledImage(Image srcImg, int w, int h){
    BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2 = resizedImg.createGraphics();

    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    g2.drawImage(srcImg, 0, 0, w, h, null);

    return resizedImg;
}


}



